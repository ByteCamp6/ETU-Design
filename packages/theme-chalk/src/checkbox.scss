@use 'sass:map';

@use 'mixins/mixins' as *;
@use 'mixins/var' as *;
@use "mixins/function" as *;

$common-component-size: () !default;
$common-component-size: map.merge(
    (
      'large': 40px,
      'default': 32px,
      'small': 24px,
    ),
    $common-component-size
);

$checkbox-height: () !default;
$checkbox-height: map.merge($common-component-size, $checkbox-height);

$checkbox-bordered-input-height: () !default;
$checkbox-bordered-input-height: map.merge(
    (
      'large': 14px,
      'default': 12px,
      'small': 12px,
    ),
    $checkbox-bordered-input-height
);

$checkbox-font-size: () !default;
$checkbox-font-size: map.merge(
    (
      'large': 14px,
      'small': 12px,
    ),
    $checkbox-font-size
);

$checkbox-bordered-input-width: () !default;
$checkbox-bordered-input-width: map.merge(
    $checkbox-bordered-input-height,
    $checkbox-bordered-input-width
);
@include b(checkbox) {
  @include set-css-var-value(('checkbox-bg-color'), white);
  @include set-css-var-value(('checkbox-text-color'),getRootCssVar('color-text-1'));
  @include set-css-var-value(('checkbox-font-weight'), 500);
  @include set-css-var-value(('checkbox-font-size'), 14px);
  @include set-css-var-value(('checkbox-input-width'), 14px);
  @include set-css-var-value(('checkbox-input-height'), 14px);
  @include set-css-var-value(('checkbox-input-border'), getRootCssVar('border-default'));
  @include set-css-var-value(('checkbox-border-radius'), 2px);
  @include set-css-var-value(('checkbox-border-color'), getRootCssVar('color-primary'));
  @include set-css-var-value(('disabled-text-color'), getRootCssVar('color-text-3'));
  @include set-css-var-value(('checkbox-disabled-input-fill'), getRootCssVar('color-fill-0'));
  @include set-css-var-value(('checkbox-disabled-border-color'), getRootCssVar('color-text-3'));
}

@include b(checkbox) {
  color: getCssVar('checkbox-text-color');
  font-weight: getCssVar('checkbox-font-weight');
  font-size: getCssVar('checkbox-font-size');
  position: relative;
  cursor: pointer;
  display: inline-flex;
  align-items: center;
  white-space: nowrap;
  user-select: none;
  margin-right: 30px;

  @include e(input) {
    white-space: nowrap;
    cursor: pointer;
    outline: none;
    display: inline-flex;
    position: relative;

    @include when(disabled) {
      .#{bem('checkbox', 'inner')} {
        background-color: getCssVar('checkbox-disabled-input-fill');
        border-color: getCssVar('checkbox-disabled-border-color');
        cursor: not-allowed;

        &::after {
          cursor: not-allowed;
          border-color: getCssVar('disabled-text-color');
        }

        //& + .#{$namespace}-checkbox__label {
        //  cursor: not-allowed;
        //}
      }

      &.is-checked {
        .#{bem('checkbox', 'inner')} {
          background-color: getCssVar('checkbox-disabled-input-fill');
          border-color: getCssVar('checkbox-disabled-border-color');

          &::after {
            border-color: getCssVar('disabled-text-color');
          }
        }
      }

      & + span.#{bem('checkbox','label')} {
        color: getCssVar('disabled-text-color');
        cursor: not-allowed;
      }
    }

    @include when(checked) {
      .#{bem('checkbox', 'inner')} {
        background-color: getCssVar('checkbox-border-color');
        border-color: getCssVar('checkbox-border-color');

        &::after {
          transform: rotate(45deg) scaleY(1);
        }
      }
    }

    @include when(indeterminate) {
      .#{bem('checkbox', 'inner')} {
        background-color: getCssVar('checkbox-border-color');
        border-color: getCssVar('checkbox-border-color');

        &::before {
          content: '';
          position: absolute;
          display: block;
          background-color: white;
          height: 2px;
          transform: scale(0.5);
          left: 0;
          right: 0;
          top: 5px;
        }

        &::after {
          display: none;
        }
      }
    }
  }

  @include e(inner) {
    display: inline-block;
    position: relative;
    border: getCssVar('checkbox-input-border');
    border-radius: getCssVar('checkbox-border-radius');
    box-sizing: border-box;
    width: getCssVar('checkbox-input-width');
    height: getCssVar('checkbox-input-height');
    background-color: getCssVar('checkbox-bg-color');
    transition: border-color 0.25s cubic-bezier(0.71, -0.46, 0.29, 1.46),
    background-color 0.25s cubic-bezier(0.71, -0.46, 0.29, 1.46),
    outline 0.25s cubic-bezier(0.71, -0.46, 0.29, 1.46);

    &:hover {
      border-color: getCssVar('checkbox-border-color');
    }

    &::after {
      box-sizing: content-box;
      content: '';
      border: 1px solid white;
      border-left: 0;
      border-top: 0;
      height: 7px;
      left: 4px;
      position: absolute;
      top: 1px;
      transform: rotate(45deg) scaleY(0);
      width: 3px;
      transition: transform 0.15s ease-in 0.05s;
      transform-origin: center;
    }
  }

  @include e(label) {
    display: inline-block;
    padding-left: 8px;
    line-height: 1;
    font-size: getCssVar('checkbox-font-size');
  }

  // 原生的组件
  @include e(original) {
    opacity: 0;
    outline: none;
    position: absolute;
    margin: 0;
    width: 0;
    height: 0;
    z-index: -1;
  }
}